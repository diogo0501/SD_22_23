/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: sdmessage.proto */

#ifndef PROTOBUF_C_sdmessage_2eproto__INCLUDED
#define PROTOBUF_C_sdmessage_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _MessageT MessageT;
typedef struct _MessageT__EntryT MessageT__EntryT;
typedef struct _MessageT__KeysT MessageT__KeysT;
typedef struct _MessageT__ValuesT MessageT__ValuesT;


/* --- enums --- */

typedef enum _MessageT__Opcode {
  MESSAGE_T__OPCODE__OP_BAD = 0,
  MESSAGE_T__OPCODE__OP_SIZE = 10,
  MESSAGE_T__OPCODE__OP_HEIGHT = 20,
  MESSAGE_T__OPCODE__OP_DEL = 30,
  MESSAGE_T__OPCODE__OP_GET = 40,
  MESSAGE_T__OPCODE__OP_PUT = 50,
  MESSAGE_T__OPCODE__OP_GETKEYS = 60,
  MESSAGE_T__OPCODE__OP_GETVALUES = 70,
  MESSAGE_T__OPCODE__OP_ERROR = 99
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(MESSAGE_T__OPCODE)
} MessageT__Opcode;
typedef enum _MessageT__CType {
  MESSAGE_T__C_TYPE__CT_BAD = 0,
  MESSAGE_T__C_TYPE__CT_KEY = 10,
  MESSAGE_T__C_TYPE__CT_VALUE = 20,
  MESSAGE_T__C_TYPE__CT_ENTRY = 30,
  MESSAGE_T__C_TYPE__CT_KEYS = 40,
  MESSAGE_T__C_TYPE__CT_VALUES = 50,
  MESSAGE_T__C_TYPE__CT_RESULT = 60,
  MESSAGE_T__C_TYPE__CT_NONE = 70
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(MESSAGE_T__C_TYPE)
} MessageT__CType;

/* --- messages --- */

struct  _MessageT__EntryT
{
  ProtobufCMessage base;
  char *key;
  protobuf_c_boolean has_value;
  ProtobufCBinaryData value;
};
#define MESSAGE_T__ENTRY_T__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&message_t__entry_t__descriptor) \
    , NULL, 0,{0,NULL} }


struct  _MessageT__KeysT
{
  ProtobufCMessage base;
  size_t n_keys;
  char **keys;
};
#define MESSAGE_T__KEYS_T__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&message_t__keys_t__descriptor) \
    , 0,NULL }


struct  _MessageT__ValuesT
{
  ProtobufCMessage base;
  size_t n_values;
  ProtobufCBinaryData *values;
};
#define MESSAGE_T__VALUES_T__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&message_t__values_t__descriptor) \
    , 0,NULL }


typedef enum {
  MESSAGE_T__CONTENT__NOT_SET = 0,
  MESSAGE_T__CONTENT_RESULT = 5,
  MESSAGE_T__CONTENT_ENTRY = 6,
  MESSAGE_T__CONTENT_KEYS = 7,
  MESSAGE_T__CONTENT_VALUES = 8,
} MessageT__ContentCase;

struct  _MessageT
{
  ProtobufCMessage base;
  protobuf_c_boolean has_opcode;
  MessageT__Opcode opcode;
  protobuf_c_boolean has_c_type;
  MessageT__CType c_type;
  protobuf_c_boolean has_data;
  ProtobufCBinaryData data;
  protobuf_c_boolean has_data_size;
  int32_t data_size;
  MessageT__ContentCase content_case;
  union {
    int32_t result;
    MessageT__EntryT *entry;
    MessageT__KeysT *keys;
    MessageT__ValuesT *values;
  };
};
#define MESSAGE_T__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&message_t__descriptor) \
    , 0,0, 0,0, 0,{0,NULL}, 0,0, MESSAGE_T__CONTENT__NOT_SET, {0} }


/* MessageT__EntryT methods */
void   message_t__entry_t__init
                     (MessageT__EntryT         *message);
/* MessageT__KeysT methods */
void   message_t__keys_t__init
                     (MessageT__KeysT         *message);
/* MessageT__ValuesT methods */
void   message_t__values_t__init
                     (MessageT__ValuesT         *message);
/* MessageT methods */
void   message_t__init
                     (MessageT         *message);
size_t message_t__get_packed_size
                     (const MessageT   *message);
size_t message_t__pack
                     (const MessageT   *message,
                      uint8_t             *out);
size_t message_t__pack_to_buffer
                     (const MessageT   *message,
                      ProtobufCBuffer     *buffer);
MessageT *
       message_t__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   message_t__free_unpacked
                     (MessageT *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*MessageT__EntryT_Closure)
                 (const MessageT__EntryT *message,
                  void *closure_data);
typedef void (*MessageT__KeysT_Closure)
                 (const MessageT__KeysT *message,
                  void *closure_data);
typedef void (*MessageT__ValuesT_Closure)
                 (const MessageT__ValuesT *message,
                  void *closure_data);
typedef void (*MessageT_Closure)
                 (const MessageT *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor message_t__descriptor;
extern const ProtobufCMessageDescriptor message_t__entry_t__descriptor;
extern const ProtobufCMessageDescriptor message_t__keys_t__descriptor;
extern const ProtobufCMessageDescriptor message_t__values_t__descriptor;
extern const ProtobufCEnumDescriptor    message_t__opcode__descriptor;
extern const ProtobufCEnumDescriptor    message_t__c_type__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_sdmessage_2eproto__INCLUDED */
